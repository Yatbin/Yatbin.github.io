<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <url>/2020/07/12/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Hexo-GitHub搭建个人博客"><a href="#Hexo-GitHub搭建个人博客" class="headerlink" title="Hexo+GitHub搭建个人博客"></a>Hexo+GitHub搭建个人博客</h1><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>1、下载并安装Node.js：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br><img src="https://s1.ax1x.com/2020/07/11/U1myO1.png" alt="U1myO1.png" border="0" width="960"/></p>
<p>2、下载并安装Git：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br><img src="https://s1.ax1x.com/2020/07/11/U1nJ9e.png" alt="U1nJ9e.png" border="0" width="960" /></p>
<p>查看Git安装是否完成，在win+r中输入cmd命令窗口弹出后，输入git –version查看git版本：<br><img src="https://s1.ax1x.com/2020/07/11/U1nccj.png" alt="U1nccj.png" border="0" /></p>
<p>3、Github注册和创建仓库：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a><br>创建完Github账号后，创建一个仓库来管理自己的文件。<br>（1）点击个人主页右上角“+”里面的 New repository。<br><img src="https://s1.ax1x.com/2020/07/11/U1nfH0.png" alt="U1nfH0.png" border="0" /><br>（2）输入Repository name：用户名.github.io，这里的用户名一定<strong>要和注册时候的一样</strong>！<br><img src="https://s1.ax1x.com/2020/07/11/U1usVx.png" alt="U1usVx.png" border="0" /><br>（3）点击Create repository。</p>
<p>4、配置SSH免密登录<br>（1）在桌面点击鼠标右键，选择<strong>Git Bash Here</strong>，打开Git Bash客户端。<br>（2）设置user name和email：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><br>（3）生成SSH密钥。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><br>（4）输入命令后直接回车即可，在C盘的用户目录下会生成.ssh文件夹。<br>（5）在Github上添加SSH keys。具体步骤是点击Github头像下的<strong>Settings-&gt;SSH and GPG keys-&gt;New SSH key</strong>，将本地的公钥<strong>id_rsa_pub</strong>内容复制粘贴到其中即可。<br><img src="https://s1.ax1x.com/2020/07/11/U1M5UP.png" alt="U1M5UP.png" border="0" /><br>（6）验证SSH免密是否成功。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>1、创建一个文件夹，比如文件名为Hexo，进入到该文件夹里，在文件导航栏里输入cmd进入命令提示符，输入以下命令安装Hexo:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-cli -g</span><br><span class="line">cnpm install hexo --save</span><br></pre></td></tr></table></figure><br>2、初始化hexo，在blog目录下点击鼠标右键，打开<strong>Git Bash</strong>终端<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><br>3、在cmd中输入以下命令安装依赖以及相关插件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">cnpm install hexo-generator-index --save</span><br><span class="line">cnpm install hexo-generator-archive --save</span><br><span class="line">cnpm install hexo-generator-category --save</span><br><span class="line">cnpm install hexo-generator-tag --save</span><br><span class="line">cnpm install hexo-server --save</span><br><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">cnpm install hexo-deployer-heroku --save</span><br><span class="line">cnpm install hexo-deployer-rsync --save</span><br><span class="line">cnpm install hexo-deployer-openshift --save</span><br><span class="line">cnpm install hexo-renderer-marked@0.2 --save</span><br><span class="line">cnpm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">cnpm install hexo-generator-feed@1 --save</span><br><span class="line">cnpm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><br>4、启动Hexo<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><br>5、在浏览器中输入：<strong>localhost:4000</strong>，可以看到Hexo的示例页面<br><img src="https://s1.ax1x.com/2020/07/11/U1GJ9x.png" alt="U1GJ9x.png" border="0" width="960" /></p>
<h2 id="将博客部署到Github"><a href="#将博客部署到Github" class="headerlink" title="将博客部署到Github"></a>将博客部署到Github</h2><p>1、在上面创建的Hexo文件夹中找到<strong>_config.yml</strong>文件，用文本编辑器打开，在最下方添加远程仓库地址：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #xxx改为你的github用户名（请修改）</span><br><span class="line">  #注意，如果repository写成https:&#x2F;&#x2F;github.com，在提交任务至Github时，会频繁输入用户名密码</span><br><span class="line">  repository: git@github.com:xxx&#x2F;xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><br>2、在<strong>Hexo\source_post</strong>目录下右击选择<strong>Git Bash Here</strong>,使用以下命令新建博客，会生成firstblog.md的文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;firstblog&quot;</span><br></pre></td></tr></table></figure><br>3、可以根据Markdown语法来编辑上面生成的文件<br>4、设置身份信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><br>5、部署到Github上<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><br>6、如果遇到到<strong>ERROR Deployer not found: git</strong>提示，可以尝试使用以下命令后再重新部署到Github上<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><br>7、在浏览器上输入：<strong>用户名.github.io</strong>即可看到刚才写的博客已提交到仓库，在这一步可能你看到的是<strong>&lt;%- partial(‘_partial/head’) %&gt;</strong>，等一小会后刷新就可以了，至此，一个简单的博客就搭建好了，接下来就可以美化我们的博客了。</p>
<h2 id="美化博客"><a href="#美化博客" class="headerlink" title="美化博客"></a>美化博客</h2><p>基于hexo博客系统的主题有很多，你可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a>找到你喜欢的主题。我采用的是next主题，以下是注意的几点：</p>
<ul>
<li>next主题的<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">官方网站</a>详细阐述了主题的基本配置过程，我也是参照它一步步进行配置的</li>
<li>在配置主题的过程中要注意区分两个配置文件，一个是主题的配置文件_config.yml，一个是站点的配置文件_config.yml。因为有些配置操作实在主题的配置文件中进行的，有的实在站点的配置文件进行的，一定不能弄混了。</li>
<li>推荐一篇<a href="http://shenzekun.cn/hexo的next主题个性化配置教程.html" target="_blank" rel="noopener">next主题美化的博文</a></li>
<li>对主题进行配置时，建议是每修改一项之后都在本地运行一下（先运行hexo g命令，在运行hexo s命令，在浏览器中查看），看看有没有出错，这样可以及时找到出错的地方。</li>
</ul>
<h2 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h2><p>1、可以使用Markdown语法来撰写自己的博客内容，在博客内容之前加上如下语句：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World #自己的博客标题</span><br><span class="line">tags: test #博客标签</span><br><span class="line">categories: test #博客分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure><br>2、之后将博客导出为md格式放到Hexo根目录下的source_posts文件夹里<br>3、使用<strong>hexo d -g</strong>将博客部署到github上</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive运行报错Error during job</title>
    <url>/2020/07/13/Hive%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99Error%20during%20job/</url>
    <content><![CDATA[<h1 id="Hive运行报错Error-during-job-obtaining-debugging-information…"><a href="#Hive运行报错Error-during-job-obtaining-debugging-information…" class="headerlink" title="Hive运行报错Error during job, obtaining debugging information…"></a>Hive运行报错Error during job, obtaining debugging information…</h1><p>在hive中执行select count(*)语句时候，一直卡住，之后报错，具体报错内容如下:<br><img src="https://s1.ax1x.com/2020/07/13/UGzojK.png" alt="UGzojK.png" border="0" width="960" /><br>之后我执行insert语句也是报这样的错，但是select的简单语句却非常快执行出结果来，然后我按照网上的教程查看自己的yarn页面<br><img src="https://s1.ax1x.com/2020/07/13/UJSBUH.png" alt="UJSBUH.png" border="0" /><br>可以看到<strong>Call From study.centos.yatbin/223.82.248.117 to 223.82.248.117:34116 </strong>这些提示，之后我在hive中执行如下命令将hive设置成本地模式来执行任务，问题得到解决，在此记录以下！<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set hive.exec.mode.local.auto&#x3D;true;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记01</title>
    <url>/2020/11/17/Linux01_%E9%A6%96%E6%AC%A1%E7%99%BB%E5%BD%95%E4%B8%8E%E5%9C%A8%E7%BA%BF%E6%B1%82%E5%8A%A9/</url>
    <content><![CDATA[<h1 id="首次登录与在线求助"><a href="#首次登录与在线求助" class="headerlink" title="首次登录与在线求助"></a>首次登录与在线求助</h1><ul>
<li>在Linux中，<strong>隐藏文件</strong>不是什么特殊的权限，单纯用文件名命名的处理方式来搞定，通过在文件名的开头加上小数点，那么该文件名就不会在一般观察模式被显示出来</li>
<li>注销不是关机，只是让你的账号离开系统而已，注销命令：<strong>exit</strong></li>
<li>Linux默认的情况下会提供<strong>六个终端</strong>来让用户登录，切换的方式为：<strong>Ctrl+Alt+F1~F6</strong></li>
<li><p>纯命令行界面启动图形界面的做法：<strong>startx</strong></p>
<h2 id="开始执行命令"><a href="#开始执行命令" class="headerlink" title="开始执行命令"></a>开始执行命令</h2><p><strong>命令格式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[yatbin@study ~]$ command [-options] parameter1 parameter2...</span><br><span class="line">					命令		  选项	    参数1	   参数2</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li><p>一行命令中第一个输入的部分绝对是命令（Command）或可执行文件（例如shell脚本）</p>
</li>
<li><p>command为命令的名称，例如切换工作目录命令为cd等</p>
</li>
<li><p>中括号[]并不存在实际的命令中，表示是可选的，而加入选项设置时，通常会在选项前带 - 号，例如-h；有时候会使用选项的完整全名，则选项前带有 – 符号，例如–help</p>
</li>
<li><p>parameter1 parameter2为依附在选项后面的参数，或者是command的参数</p>
</li>
<li><p>命令、选项、参数等这几个东西中间以空格来区分<strong>不论空几格shell都视为一格</strong></p>
</li>
<li><p>按下<strong>回车键</strong>后，该命令就立即执行，<strong>回车键代表着一行命令的开始启动</strong></p>
</li>
<li><p>命令太长的时候，可以使用<strong>反斜杠(\)</strong>来转义回车键，时命令连续到下一行，注意，<strong>反斜杠后就立刻接着特殊字符才能转义</strong></p>
</li>
<li><p>在Linux中，<strong>英文大小写字符是不一样的</strong></p>
<h2 id="基础命令的操作"><a href="#基础命令的操作" class="headerlink" title="基础命令的操作"></a>基础命令的操作</h2></li>
<li>显示日期与时间：<strong>date</strong></li>
<li>显示日历：<strong>cal</strong><br><img src="https://img-blog.csdnimg.cn/20201115153126840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY4OTIxNw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><ol start="3">
<li>简单好用的计算器：<strong>bc</strong><ul>
<li>+加法<ul>
<li>-减法</li>
<li>*乘法</li>
<li>\/除法</li>
<li>^指数</li>
<li>%余数<br><img src="https://img-blog.csdnimg.cn/20201115153502634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY4OTIxNw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注意：bc默认仅输出整数，如果要输出小数点下位数，必须要执行scale=number命令，number就是小数点位数，如果要回到命令行界面，输入[quit]即可</strong></li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="重要热键-Tab-、-Ctrl-c、-Ctrl-d"><a href="#重要热键-Tab-、-Ctrl-c、-Ctrl-d" class="headerlink" title="重要热键[Tab]、[Ctrl]-c、[Ctrl]-d"></a>重要热键[Tab]、[Ctrl]-c、[Ctrl]-d</h2><ol>
<li><strong>[Tab]</strong><ul>
<li>[Tab]接在一串命令的第一个字段后面，则为【命令补齐】</li>
<li>[Tab]接在一串命令的第二个字段后面，则为【文件补齐】</li>
<li>若安装Bash-completion软件，则在某些命令后面使用[Tab]按键时，可以进行【选项/参数的补齐】功能</li>
</ul>
</li>
<li><strong>[Ctrl-c]</strong>：中断目前程序的运行</li>
<li><strong>[Ctrl-d]</strong>:键盘输入结束（EOF）的意思，也可以用来取代exit的输入，<strong>如果你想要直接离开命令行模式，可以直接按下[Ctrl-d]就能够直接离开</strong></li>
<li><p><strong>[Shift]+{[Page Up]|[Page Down]}</strong>：当命令的输出信息很长时，可以使用这个命令翻页</p>
<h2 id="命令-–help-man-page-info-page"><a href="#命令-–help-man-page-info-page" class="headerlink" title="命令 –help| man page| info page"></a>命令 –help| man page| info page</h2><ul>
<li>命令的 - -help求助说明：这个命令通常用在协助你查询曾经使用的命令所具备的参数，在Linux下面不用硬背命令参数。</li>
<li><strong>man command</strong>：使用该命令进入man page页面，例如man date命令，man page 常用快捷键如下：</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th>按键</th>
<th>进行工作</th>
</tr>
</thead>
<tbody>
<tr>
<td>空格键</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>[Page Down]</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>[Page Up]</td>
<td>向上翻一页</td>
</tr>
<tr>
<td>[Home]</td>
<td>去到第一页</td>
</tr>
<tr>
<td>[End]</td>
<td>去到最后一页</td>
</tr>
<tr>
<td>/string</td>
<td>向【下】查找string这个字符串，如果要查找bird的话，输入/bird</td>
</tr>
<tr>
<td>?string</td>
<td>向【上】查找string这个字符串</td>
</tr>
<tr>
<td>n,N</td>
<td>利用/或？来查找字符串时，可以用n来继续下一个查找，用N来进行【反向】查找。例如，查找/bird时，按下n继续往下查询，N往上查询，而?bird时，n继续【向上】查询，N反向查询</td>
</tr>
<tr>
<td>q</td>
<td>结束这次man page</td>
</tr>
</tbody>
</table>
<ul>
<li>在使用man command命令时，例如man date，你会看到【DATE(1)】，常见的几个数字的意义如下：</li>
</ul>
<table>
<thead>
<tr>
<th>代号</th>
<th>代表内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>用户在shell环境中可以操作的命令或课执行文件</strong></td>
</tr>
<tr>
<td>2</td>
<td>系统内核可以调用的函数与工具</td>
</tr>
<tr>
<td>3</td>
<td>一些常用的函数(function)与函数库(library)，大部分为C的函数库(libc)</td>
</tr>
<tr>
<td>4</td>
<td>设备文件的说明，通常在/dev下的文件</td>
</tr>
<tr>
<td>5</td>
<td><strong>配置文件或是某些文件的格式</strong></td>
</tr>
<tr>
<td>6</td>
<td>游戏(games)</td>
</tr>
<tr>
<td>7</td>
<td>惯例与协议等，例如Linux文件系统、网络协议、ASCII代码等的说明</td>
</tr>
<tr>
<td>8</td>
<td><strong>系统管理员可用的管理命令</strong></td>
</tr>
<tr>
<td>9</td>
<td>跟内核有关的文件</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>info page</strong>:info page将文件数据拆成一个个的段落，每个段落用自己的页面编写，并且在各个页面中还有类似网页的超链接来跳转到各个不同的页面中，每个独立的页面被称为一个节点（node），进入info页面后，如果不知道怎么使用，按下h，系统就能提供一些基本的按键功能介绍。</li>
</ul>
<table>
<thead>
<tr>
<th>按键</th>
<th>进行工作</th>
</tr>
</thead>
<tbody>
<tr>
<td>空格键</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>[Page Down]</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>[Page Up]</td>
<td>向上翻一页</td>
</tr>
<tr>
<td>[Tab]</td>
<td>在节点之间跳动，有节点的地方，通常会以*显示</td>
</tr>
<tr>
<td>[Enter]</td>
<td>当光标在节点上面时，按下Enter可以进入该节点</td>
</tr>
<tr>
<td>b</td>
<td>移动光标到该info界面的第一处</td>
</tr>
<tr>
<td>e</td>
<td>移动光标到该info界面当中的最后一个节点处</td>
</tr>
<tr>
<td>n</td>
<td>前往下一个节点</td>
</tr>
<tr>
<td>p</td>
<td>前往上一个节点</td>
</tr>
<tr>
<td>u</td>
<td>向上移动一层</td>
</tr>
<tr>
<td>s(/)</td>
<td>在info page当中进行查找</td>
</tr>
<tr>
<td>h,?</td>
<td>显示帮助选项</td>
</tr>
<tr>
<td>q</td>
<td>结束这次的info page</td>
</tr>
</tbody>
</table>
<h2 id="正确的关机方法"><a href="#正确的关机方法" class="headerlink" title="正确的关机方法"></a>正确的关机方法</h2><ul>
<li>Linux是多用户的，可能有很多人同时在你的主机上工作，所以在关机之前，要查看当前系统的使用状态，使用下面的命令查看：</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>who</td>
<td>查看目前在线的用户</td>
</tr>
<tr>
<td>nestata</td>
<td>查看网络的联机状态</td>
</tr>
<tr>
<td>ps-aux</td>
<td>了解主机目前的使用状态</td>
</tr>
</tbody>
</table>
<ul>
<li>在系统关机或者重新启动之前，最好多执行几次<strong>sync</strong>命令，把内存中的数据写入到硬盘当中</li>
<li>常用关机命令<strong>shutdowm</strong>，使用man shutdown来查看详细使用方式</li>
<li>重新启动，关机：<strong>reboot</strong>、<strong>halt</strong>、<strong>poweroff</strong>：在默认情况下，这几个命令都会完成一样的工作（全部操作都是去调用<strong>systemctl</strong>这个重要的管理命令）</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
