<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迷茫的正太</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-25T03:31:43.054Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>迷茫的正太</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux学习笔记02</title>
    <link href="http://yoursite.com/2020/11/25/Linux02_Linux%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/11/25/Linux02_Linux的文件权限与目录配置/</id>
    <published>2020-11-25T03:31:12.504Z</published>
    <updated>2020-11-25T03:31:43.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的文件权限与目录配置"><a href="#Linux的文件权限与目录配置" class="headerlink" title="Linux的文件权限与目录配置"></a>Linux的文件权限与目录配置</h1><h2 id="1-用户与用户组"><a href="#1-用户与用户组" class="headerlink" title="1.用户与用户组"></a>1.用户与用户组</h2><ul><li>每个文件都有相当多的属性与权限，最重要的概念可能就是文件的拥有者了</li><li><strong>文件拥有者（User）</strong></li><li><strong>用户组（Group）</strong>：当你在团队进行协同工作的时候，用户组非常有用，<strong>每个账号都可以有多个用户组的支持</strong></li><li><strong>其他人（Others）</strong>：在Linux里面，任何一个文件都具有用户、所属群组以及其他人（Others）三种身份的个别权限，注意<strong>root无所不能</strong></li></ul><h2 id="2-Linux文件权限概念"><a href="#2-Linux文件权限概念" class="headerlink" title="2.Linux文件权限概念"></a>2.Linux文件权限概念</h2><h3 id="2-1Linux文件属性"><a href="#2-1Linux文件属性" class="headerlink" title="2.1Linux文件属性"></a>2.1Linux文件属性</h3><ol><li>使用<strong>su -</strong> 切换为root身份</li><li>运行<strong>ls -al</strong>命令，运行结果如下，如果不熟悉ls命令，运行ls帮助命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x.  2 root root     6 7月  10 13:22 公共</span><br><span class="line">drwxr-xr-x.  2 root root     6 7月  10 13:22 模板</span><br><span class="line">drwxr-xr-x.  2 root root     6 7月  10 13:22 视频</span><br><span class="line">drwxr-xr-x.  2 root root     6 7月  10 13:22 图片</span><br><span class="line">drwxr-xr-x.  2 root root     6 7月  10 13:22 文档</span><br><span class="line">drwxr-xr-x.  2 root root     6 7月  10 13:22 下载</span><br><span class="line">drwxr-xr-x.  2 root root     6 7月  10 13:22 音乐</span><br><span class="line">drwxr-xr-x.  2 root root     6 7月  10 13:22 桌面</span><br><span class="line">[1]         [2] [3]  [4]    [5]    [6]       [7]</span><br><span class="line">权限        链接 拥有者用户组 文件容量 修改日期 文件名</span><br></pre></td></tr></table></figure></li><li>文件属性说明：<ol><li>第[1]栏代表这个文件的类型与权限<ul><li>这一栏总共有十个字符</li><li>第一个字符代表这个文件是<strong>目录、文件还是链接文件</strong>等</li><li>[d]表示目录，[-]表示文件，[l]表示链接文件（link file)，[b]表示设备文件里面的可供存储的周边设备，[c]表示设备文件里面的串行端口设备，例如键盘</li><li>接下来的字符中，三个为一组，均为[rwx]三个参数的组合，其中[r]代表可读(read)，[w]代表可写(write)，[x]代表可执行(execute)，如果没有权限，就会出现[-]号</li><li>第一组为文件<strong>拥有者</strong>(User)具备的权限，第二组为加入此<strong>用户组</strong>(Group)的账号的权限，第三组为非本人且没有加入本用户组的<strong>其他账号</strong>(Others)权限</li></ul></li><li>第[2]栏表示有多少文件名链接到此节点(inode)：每个文件都会将它的权限与属性记录到文件系统的inode中</li><li>第[3]栏表示这个文件（或者目录）的拥有者账号</li><li>第[4]栏表示这个文件所属用户组</li><li>第[5]栏表示这个文件的容量大小，默认单位是Bytes</li><li>第[6]栏表示这个文件的创建日期或者是最近的修改日期</li><li>第[7]栏表示文件名</li><li>root基本上不受系统权限所限制，无论文件权限是什么，默认root都可以读写</li></ol></li></ol><h3 id="2-2修改文件属性与权限"><a href="#2-2修改文件属性与权限" class="headerlink" title="2.2修改文件属性与权限"></a>2.2修改文件属性与权限</h3><ul><li><strong>chgrp</strong>(change group)：修改所属用户组，被修改的组名必须要在<strong>/etc/group</strong>文件中存在才行，否则会显示错误，详细用法参考man page</li><li><strong>chown</strong>：修改文件拥有者，用户必须是已经存在系统中的账号，也就是在<strong>/etc/passwd</strong>这个文件中有记录的用户名称才能修改，<strong>如果要连目录下的所有子目录或文件同时更改文件拥有者的话，直接加上-R的选项即可</strong>。此外，这个命令还可以顺便直接修改用户组的名称，详细用法参考man page</li><li><strong>注意</strong>：使用<code>cp 源文件 目标文件</code>这个命令将文件复制给你之外的其他人时，由于复制操作cp会复制执行者的属性与权限，所以必须要将这个文件的拥有者与用户组修改一下</li><li><strong>chmod</strong>：修改权限，两种方法，分别是使用数字或者符号来进行权限的修改：<ol><li><strong>数字类型修改文件权限</strong>：文件的权限字符为【-rwxrwxrwx】，三个三个一组，各权限数字对照表为<strong>r:4, w:2, x:1</strong>，其实这就相当于二进制，例如用户权限为rwx，那么4+2+1=7，即为二进制111，而如果时r-x，4+1=5，即为二进制101。修改权限命令的语法是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] xyz 文件或者目录</span><br><span class="line">选线与参数：</span><br><span class="line">xyz:就是上面提到的数字类型的权限属性，为rwx属性数值的相加</span><br><span class="line">-R:进行递归（recursive）修改，即子目录下的所有文件都会修改</span><br></pre></td></tr></table></figure></li><li><strong>符号类型修改文件权限</strong>：文件的九个权限分别是(1)user，(2)group，(3)others三种身份，可以借用u、g、o来代表三种身份的权限，此外a代表all即全部身份，可以用下表的方法来修改权限</li></ol></li></ul><table><thead><tr><th>chmod</th><th>u(user)<br>g(group)<br>o(others)<br>a(all)</th><th>+（加入）<br>-（移除）<br>=（设置）</th><th>r<br>w<br>x</th><th>文件或目录</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h3 id="2-3目录与文件的权限意义"><a href="#2-3目录与文件的权限意义" class="headerlink" title="2.3目录与文件的权限意义"></a>2.3目录与文件的权限意义</h3><ol><li>权限对文件的重要性<ul><li>r(read):可读取此文件的实际内容</li><li>w(write):可以编辑、新增或是修改该文件的内容（但是不含删除该文件）</li><li>x(execute):该文件具有可以被系统执行的权限，在Linux下面，<strong>我们的文件能否被执行，是借助是否具有【x】这个权限来决定，跟文件名是没有绝对的关系的</strong></li></ul></li><li>权限对目录的重要性<ul><li>r(read contents in directory):表示具有读取目录结构列表的权限，所以当你具有读取（r）一个目录的权限时，你可以查询该目录下的文件名数据，所以可以用ls这个命令将该目录的内容列表显示出来</li><li>w(modify contents of directory):<strong>表示具有改动该目录结构列表的权限</strong>：<ul><li>建立新的文件与目录</li><li>删除已经存在的文件与目录（不论该文件的权限是什么）</li><li>将已存在的文件或者目录进行更名</li><li>移动该目录内的文件、目录位置</li></ul></li><li>x(access directory):<strong>目录的x代表的是用户能否进入该目录成为工作目录的用途</strong>，如果你在某目录下不具有x的权限，那么你就无法切换到该目录下，也就无法执行该目录下的任何命令，即使你具有该目录的 r 或 w 权限</li><li><strong>例</strong>：假设有两个文件名：<code>/dir1/file1</code>和<code>/dir2</code>，分别需要的最小的权限才能完成各项任务如下所示：</li></ul></li></ol><table><thead><tr><th>操作</th><th>/dir1</th><th>/dir1/file1</th><th>/dir2</th><th>重点</th></tr></thead><tbody><tr><td>读取file1内容</td><td>x</td><td>r</td><td>-</td><td>要能够进入/dir1才能读取到里面的文件数据</td></tr><tr><td>修改file1内容</td><td>x</td><td>rw</td><td>-</td><td>能够进入/dir1且修改file1才行</td></tr><tr><td>执行file1内容</td><td>x</td><td>rx</td><td>-</td><td>能够进入/dir1且file1能运行才行</td></tr><tr><td>删除file1文件</td><td>wx</td><td>-</td><td>-</td><td>能够进入/dir1具有目录修改的权限即可</td></tr><tr><td>将file1复制到/dir2</td><td>x</td><td>r</td><td>wx</td><td>要能够读file1且能够修改/dir2内的数据</td></tr></tbody></table><h3 id="2-4Linux文件种类与拓展名"><a href="#2-4Linux文件种类与拓展名" class="headerlink" title="2.4Linux文件种类与拓展名"></a>2.4Linux文件种类与拓展名</h3><ol><li>文件种类<ol><li>常规文件（regular file）<ul><li>纯文本文件</li><li>二进制文件</li><li>数据文件：有些程序在运行过程当中会读取某些特定格式的文件，那些特定格式的文件可以被成为数据文件</li></ul></li><li>目录（directory）</li><li>链接文件（link）：类似Windows系统下面的快捷方式</li><li>设备与设备文件（device）：与系统周边及存储等相关的一些文件，通常都在/dev这个目录之下，通常分为两种：<ul><li>区块（block）设备文件：就是一些存储数据，以提供系统随机存取的接口设备，例如硬盘和软盘，这些<strong>文件第一个属性为[b]</strong></li><li>字符（character）设备文件：一些串行端口的接口设备，例如键盘、鼠标等，这些设备一次性读取，不能够截断输出，<strong>第一个属性是[c]</strong></li></ul></li><li>数据接口文件：这种类型的文件通常被用在网络上的数据交换，<strong>第一个属性为[s]</strong></li><li>数据输送文件（FIFO，pipe）：主要的目的是解决多个程序同时读写一个文件所造成的错误问题</li></ol></li><li>Linux文件扩展名：<strong>一个Linux文件能否被执行，与它第一栏的十个属性有关，与文件名一点关系也没有</strong>，只要你的权限当中有【x】，就代表这个文件具有被执行的能力，不过<strong>可以被执行与可以执行成功是不一样的</strong>。我们仍然希望可以借助扩展名来了解该文件，所以通常我们还是会以适当的扩展名来表示该文件是什么种类，下面有数种常用的扩展名：<ul><li>*.sh：脚本或批处理文件（scripts），因为批处理文件使用shell写成，所以扩展名就编程.sh</li><li><em>Z、 </em>.tar、 <em>.tar.gz、 </em>.zip、 *.tgz：经过打包的压缩文件，这是因为压缩软件分别为gunzip、tar等，由于不同的压缩软件，而取其相关的扩展名</li><li><em>.html、 </em>.php：网页相关文件，分别代表HTML语法与PHP语法的网页文件</li></ul></li><li>Linux文件名长度限制：单一文件或者目录的最大容许文件名为255字节，以一个ASCII英文占用一个字节来说，则大约可达255个字符长度。若是以每个汉字占用2字节来说，最大文件名大约在128个汉字之间</li><li>Linux文件名的限制：由于Linux在命令行模式下的一些命令操作关系，一般来说，在设置Linux下面的文件名时，最好可以避免一些特殊字符比较好，例如<code>* ? &gt; &lt; ; &amp; ! [ ] | \ &#39; &quot; ( ) { }</code>，因为这些符号在命令行模式下，是有特殊意义的。</li></ol><h2 id="3Linux目录配置"><a href="#3Linux目录配置" class="headerlink" title="3Linux目录配置"></a>3Linux目录配置</h2><h3 id="3-1Linux目录配置的依据——FHS-Filesystem-Hierarchy-Standard"><a href="#3-1Linux目录配置的依据——FHS-Filesystem-Hierarchy-Standard" class="headerlink" title="3.1Linux目录配置的依据——FHS(Filesystem Hierarchy Standard)"></a>3.1Linux目录配置的依据——FHS(Filesystem Hierarchy Standard)</h3><p>FHS的目的是希望<strong>让用户可以了解到已安装软件通常放置于哪个目录下</strong>，希望独立的软件开发商、操作系统制作者以及想要维护系统的用户，都能够遵循FHS的标准。FHS依据文件系统使用的频繁与否与是否允许用户随意修改，将目录定义成为四种交互作用的形态：<br>|  | 可分享（shareable） |不可分享（unshareable）|<br>|–|–|–|<br>|  不变（static）|/usr（软件存放处） |/etc（配置文件）|<br>||/opt（第三方辅助软件）|/boot（启动与内核文件）|<br>|可变动（variable）|/var/mail（用户邮箱）|/var/run（程序相关）|<br>||var/spool/news（新闻组）|/var/lock（程序相关）|</p><ul><li><strong>可分享</strong>：可以分享给其他系统挂载使用的目录，所以包括执行文件与用户的邮件等数据，是能够分享给网络上其他主机挂在用的目录</li><li><strong>不可分享</strong>：自己机器上面运行的设备文件或是与程序有关的socket文件等，由于仅与自身机器有关，所以当然就不适合分享给其他主机</li><li><strong>不变</strong>：有些数据是不会经常变动的，跟随着发行版而不变动。例如函数库、文件说明、系统管理员所管理的主机服务配置文件等</li><li><strong>可变动</strong>：经常修改的数据。例如日志文件、一般用户可自行接受的新闻组等</li></ul><p><strong>事实上，FHS针对目录树架构仅定义出三层目录下面应该放置什么数据而已</strong></p><ul><li>/（root，根目录）：<strong>与启动系统有关</strong>，根目录（/）所在分区应该越小越好，且应用程序所安装的软件最好不要与根目录放在同一分区内，保持根目录越小越好。如此不但能性能较佳，根目录所在的文件系统也较不容易发生问题</li><li>/usr（unix software resour）：与软件安装/执行有关，UNIX操作系统软件资源所放置的目录，而不是用户的数据。<strong>FHS建议所有软件开发者，应该将他们的数据合理地分别放到这个目录的子目录下，而不要自行建立该软件自己独立的目录</strong></li><li>/var（variable):<strong>与系统运行过程有关</strong>，这是在系统运行后才会渐渐占用硬盘容量的目录。因为/var目录主要针对经常性变动的文件，包括缓存（cache）、日志文件（log file）以及某些软件运行所产生的文件。</li></ul><h3 id="3-2目录树（directory-tree）"><a href="#3-2目录树（directory-tree）" class="headerlink" title="3.2目录树（directory tree）"></a>3.2目录树（directory tree）</h3><p>Linux目录配置方式为目录树，主要特点如下：</p><ul><li>目录树的起始点为根目录（/，root)</li><li>每一个目录不止能使用本地分区的文件系统，也可以使用网络上的文件系统。举例来说，可以利用Network File System（NFS）服务器挂载某特定目录等</li><li>每一个文件在此目录树中文件名（包含完整路径）都是独一无二的</li></ul><p>根据FHS的定义，最好能够将/var独立出来，这样对于系统的数据有一些安全性的保护，至少在/var死掉时，根目录还在，还能够进入恢复模式。</p><h3 id="3-3绝对路径与相对路径"><a href="#3-3绝对路径与相对路径" class="headerlink" title="3.3绝对路径与相对路径"></a>3.3绝对路径与相对路径</h3><ul><li>绝对路径：由根目录（/）开始写起的文件名或者目录名称</li><li>相对路径：相对于目前路径的文件名写法</li><li><strong>.</strong> :代表当前的目录，也可以使用 ./ 来表示</li><li><strong>..</strong> 代表上一层目录，也可以使用../ 来表示</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux的文件权限与目录配置&quot;&gt;&lt;a href=&quot;#Linux的文件权限与目录配置&quot; class=&quot;headerlink&quot; title=&quot;Linux的文件权限与目录配置&quot;&gt;&lt;/a&gt;Linux的文件权限与目录配置&lt;/h1&gt;&lt;h2 id=&quot;1-用户与用户组&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记01</title>
    <link href="http://yoursite.com/2020/11/17/Linux01_%E9%A6%96%E6%AC%A1%E7%99%BB%E5%BD%95%E4%B8%8E%E5%9C%A8%E7%BA%BF%E6%B1%82%E5%8A%A9/"/>
    <id>http://yoursite.com/2020/11/17/Linux01_首次登录与在线求助/</id>
    <published>2020-11-17T02:56:43.872Z</published>
    <updated>2020-11-17T02:58:41.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="首次登录与在线求助"><a href="#首次登录与在线求助" class="headerlink" title="首次登录与在线求助"></a>首次登录与在线求助</h1><ul><li>在Linux中，<strong>隐藏文件</strong>不是什么特殊的权限，单纯用文件名命名的处理方式来搞定，通过在文件名的开头加上小数点，那么该文件名就不会在一般观察模式被显示出来</li><li>注销不是关机，只是让你的账号离开系统而已，注销命令：<strong>exit</strong></li><li>Linux默认的情况下会提供<strong>六个终端</strong>来让用户登录，切换的方式为：<strong>Ctrl+Alt+F1~F6</strong></li><li><p>纯命令行界面启动图形界面的做法：<strong>startx</strong></p><h2 id="开始执行命令"><a href="#开始执行命令" class="headerlink" title="开始执行命令"></a>开始执行命令</h2><p><strong>命令格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[yatbin@study ~]$ command [-options] parameter1 parameter2...</span><br><span class="line">命令  选项    参数1   参数2</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>一行命令中第一个输入的部分绝对是命令（Command）或可执行文件（例如shell脚本）</p></li><li><p>command为命令的名称，例如切换工作目录命令为cd等</p></li><li><p>中括号[]并不存在实际的命令中，表示是可选的，而加入选项设置时，通常会在选项前带 - 号，例如-h；有时候会使用选项的完整全名，则选项前带有 – 符号，例如–help</p></li><li><p>parameter1 parameter2为依附在选项后面的参数，或者是command的参数</p></li><li><p>命令、选项、参数等这几个东西中间以空格来区分<strong>不论空几格shell都视为一格</strong></p></li><li><p>按下<strong>回车键</strong>后，该命令就立即执行，<strong>回车键代表着一行命令的开始启动</strong></p></li><li><p>命令太长的时候，可以使用<strong>反斜杠(\)</strong>来转义回车键，时命令连续到下一行，注意，<strong>反斜杠后就立刻接着特殊字符才能转义</strong></p></li><li><p>在Linux中，<strong>英文大小写字符是不一样的</strong></p><h2 id="基础命令的操作"><a href="#基础命令的操作" class="headerlink" title="基础命令的操作"></a>基础命令的操作</h2></li><li>显示日期与时间：<strong>date</strong></li><li>显示日历：<strong>cal</strong><br><img src="https://img-blog.csdnimg.cn/20201115153126840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY4OTIxNw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><ol start="3"><li>简单好用的计算器：<strong>bc</strong><ul><li>+加法<ul><li>-减法</li><li>*乘法</li><li>\/除法</li><li>^指数</li><li>%余数<br><img src="https://img-blog.csdnimg.cn/20201115153502634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY4OTIxNw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注意：bc默认仅输出整数，如果要输出小数点下位数，必须要执行scale=number命令，number就是小数点位数，如果要回到命令行界面，输入[quit]即可</strong></li></ul></li></ul></li></ol></li></ol><h2 id="重要热键-Tab-、-Ctrl-c、-Ctrl-d"><a href="#重要热键-Tab-、-Ctrl-c、-Ctrl-d" class="headerlink" title="重要热键[Tab]、[Ctrl]-c、[Ctrl]-d"></a>重要热键[Tab]、[Ctrl]-c、[Ctrl]-d</h2><ol><li><strong>[Tab]</strong><ul><li>[Tab]接在一串命令的第一个字段后面，则为【命令补齐】</li><li>[Tab]接在一串命令的第二个字段后面，则为【文件补齐】</li><li>若安装Bash-completion软件，则在某些命令后面使用[Tab]按键时，可以进行【选项/参数的补齐】功能</li></ul></li><li><strong>[Ctrl-c]</strong>：中断目前程序的运行</li><li><strong>[Ctrl-d]</strong>:键盘输入结束（EOF）的意思，也可以用来取代exit的输入，<strong>如果你想要直接离开命令行模式，可以直接按下[Ctrl-d]就能够直接离开</strong></li><li><p><strong>[Shift]+{[Page Up]|[Page Down]}</strong>：当命令的输出信息很长时，可以使用这个命令翻页</p><h2 id="命令-–help-man-page-info-page"><a href="#命令-–help-man-page-info-page" class="headerlink" title="命令 –help| man page| info page"></a>命令 –help| man page| info page</h2><ul><li>命令的 - -help求助说明：这个命令通常用在协助你查询曾经使用的命令所具备的参数，在Linux下面不用硬背命令参数。</li><li><strong>man command</strong>：使用该命令进入man page页面，例如man date命令，man page 常用快捷键如下：</li></ul></li></ol><table><thead><tr><th>按键</th><th>进行工作</th></tr></thead><tbody><tr><td>空格键</td><td>向下翻一页</td></tr><tr><td>[Page Down]</td><td>向下翻一页</td></tr><tr><td>[Page Up]</td><td>向上翻一页</td></tr><tr><td>[Home]</td><td>去到第一页</td></tr><tr><td>[End]</td><td>去到最后一页</td></tr><tr><td>/string</td><td>向【下】查找string这个字符串，如果要查找bird的话，输入/bird</td></tr><tr><td>?string</td><td>向【上】查找string这个字符串</td></tr><tr><td>n,N</td><td>利用/或？来查找字符串时，可以用n来继续下一个查找，用N来进行【反向】查找。例如，查找/bird时，按下n继续往下查询，N往上查询，而?bird时，n继续【向上】查询，N反向查询</td></tr><tr><td>q</td><td>结束这次man page</td></tr></tbody></table><ul><li>在使用man command命令时，例如man date，你会看到【DATE(1)】，常见的几个数字的意义如下：</li></ul><table><thead><tr><th>代号</th><th>代表内容</th></tr></thead><tbody><tr><td>1</td><td><strong>用户在shell环境中可以操作的命令或课执行文件</strong></td></tr><tr><td>2</td><td>系统内核可以调用的函数与工具</td></tr><tr><td>3</td><td>一些常用的函数(function)与函数库(library)，大部分为C的函数库(libc)</td></tr><tr><td>4</td><td>设备文件的说明，通常在/dev下的文件</td></tr><tr><td>5</td><td><strong>配置文件或是某些文件的格式</strong></td></tr><tr><td>6</td><td>游戏(games)</td></tr><tr><td>7</td><td>惯例与协议等，例如Linux文件系统、网络协议、ASCII代码等的说明</td></tr><tr><td>8</td><td><strong>系统管理员可用的管理命令</strong></td></tr><tr><td>9</td><td>跟内核有关的文件</td></tr></tbody></table><ul><li><strong>info page</strong>:info page将文件数据拆成一个个的段落，每个段落用自己的页面编写，并且在各个页面中还有类似网页的超链接来跳转到各个不同的页面中，每个独立的页面被称为一个节点（node），进入info页面后，如果不知道怎么使用，按下h，系统就能提供一些基本的按键功能介绍。</li></ul><table><thead><tr><th>按键</th><th>进行工作</th></tr></thead><tbody><tr><td>空格键</td><td>向下翻一页</td></tr><tr><td>[Page Down]</td><td>向下翻一页</td></tr><tr><td>[Page Up]</td><td>向上翻一页</td></tr><tr><td>[Tab]</td><td>在节点之间跳动，有节点的地方，通常会以*显示</td></tr><tr><td>[Enter]</td><td>当光标在节点上面时，按下Enter可以进入该节点</td></tr><tr><td>b</td><td>移动光标到该info界面的第一处</td></tr><tr><td>e</td><td>移动光标到该info界面当中的最后一个节点处</td></tr><tr><td>n</td><td>前往下一个节点</td></tr><tr><td>p</td><td>前往上一个节点</td></tr><tr><td>u</td><td>向上移动一层</td></tr><tr><td>s(/)</td><td>在info page当中进行查找</td></tr><tr><td>h,?</td><td>显示帮助选项</td></tr><tr><td>q</td><td>结束这次的info page</td></tr></tbody></table><h2 id="正确的关机方法"><a href="#正确的关机方法" class="headerlink" title="正确的关机方法"></a>正确的关机方法</h2><ul><li>Linux是多用户的，可能有很多人同时在你的主机上工作，所以在关机之前，要查看当前系统的使用状态，使用下面的命令查看：</li></ul><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>who</td><td>查看目前在线的用户</td></tr><tr><td>nestata</td><td>查看网络的联机状态</td></tr><tr><td>ps-aux</td><td>了解主机目前的使用状态</td></tr></tbody></table><ul><li>在系统关机或者重新启动之前，最好多执行几次<strong>sync</strong>命令，把内存中的数据写入到硬盘当中</li><li>常用关机命令<strong>shutdowm</strong>，使用man shutdown来查看详细使用方式</li><li>重新启动，关机：<strong>reboot</strong>、<strong>halt</strong>、<strong>poweroff</strong>：在默认情况下，这几个命令都会完成一样的工作（全部操作都是去调用<strong>systemctl</strong>这个重要的管理命令）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;首次登录与在线求助&quot;&gt;&lt;a href=&quot;#首次登录与在线求助&quot; class=&quot;headerlink&quot; title=&quot;首次登录与在线求助&quot;&gt;&lt;/a&gt;首次登录与在线求助&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Linux中，&lt;strong&gt;隐藏文件&lt;/strong&gt;不是什么特殊的
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hive运行报错Error during job</title>
    <link href="http://yoursite.com/2020/07/13/Hive%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99Error%20during%20job/"/>
    <id>http://yoursite.com/2020/07/13/Hive运行报错Error during job/</id>
    <published>2020-07-13T03:10:59.398Z</published>
    <updated>2020-07-13T03:11:36.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hive运行报错Error-during-job-obtaining-debugging-information…"><a href="#Hive运行报错Error-during-job-obtaining-debugging-information…" class="headerlink" title="Hive运行报错Error during job, obtaining debugging information…"></a>Hive运行报错Error during job, obtaining debugging information…</h1><p>在hive中执行select count(*)语句时候，一直卡住，之后报错，具体报错内容如下:<br><img src="https://s1.ax1x.com/2020/07/13/UGzojK.png" alt="UGzojK.png" border="0" width="960" /><br>之后我执行insert语句也是报这样的错，但是select的简单语句却非常快执行出结果来，然后我按照网上的教程查看自己的yarn页面<br><img src="https://s1.ax1x.com/2020/07/13/UJSBUH.png" alt="UJSBUH.png" border="0" /><br>可以看到<strong>Call From study.centos.yatbin/223.82.248.117 to 223.82.248.117:34116 </strong>这些提示，之后我在hive中执行如下命令将hive设置成本地模式来执行任务，问题得到解决，在此记录以下！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set hive.exec.mode.local.auto&#x3D;true;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hive运行报错Error-during-job-obtaining-debugging-information…&quot;&gt;&lt;a href=&quot;#Hive运行报错Error-during-job-obtaining-debugging-information…&quot; clas
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <link href="http://yoursite.com/2020/07/12/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/07/12/Github搭建博客教程/</id>
    <published>2020-07-12T14:39:07.753Z</published>
    <updated>2020-07-12T16:03:10.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-GitHub搭建个人博客"><a href="#Hexo-GitHub搭建个人博客" class="headerlink" title="Hexo+GitHub搭建个人博客"></a>Hexo+GitHub搭建个人博客</h1><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>1、下载并安装Node.js：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br><img src="https://s1.ax1x.com/2020/07/11/U1myO1.png" alt="U1myO1.png" border="0" width="960"/></p><p>2、下载并安装Git：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br><img src="https://s1.ax1x.com/2020/07/11/U1nJ9e.png" alt="U1nJ9e.png" border="0" width="960" /></p><p>查看Git安装是否完成，在win+r中输入cmd命令窗口弹出后，输入git –version查看git版本：<br><img src="https://s1.ax1x.com/2020/07/11/U1nccj.png" alt="U1nccj.png" border="0" /></p><p>3、Github注册和创建仓库：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a><br>创建完Github账号后，创建一个仓库来管理自己的文件。<br>（1）点击个人主页右上角“+”里面的 New repository。<br><img src="https://s1.ax1x.com/2020/07/11/U1nfH0.png" alt="U1nfH0.png" border="0" /><br>（2）输入Repository name：用户名.github.io，这里的用户名一定<strong>要和注册时候的一样</strong>！<br><img src="https://s1.ax1x.com/2020/07/11/U1usVx.png" alt="U1usVx.png" border="0" /><br>（3）点击Create repository。</p><p>4、配置SSH免密登录<br>（1）在桌面点击鼠标右键，选择<strong>Git Bash Here</strong>，打开Git Bash客户端。<br>（2）设置user name和email：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><br>（3）生成SSH密钥。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><br>（4）输入命令后直接回车即可，在C盘的用户目录下会生成.ssh文件夹。<br>（5）在Github上添加SSH keys。具体步骤是点击Github头像下的<strong>Settings-&gt;SSH and GPG keys-&gt;New SSH key</strong>，将本地的公钥<strong>id_rsa_pub</strong>内容复制粘贴到其中即可。<br><img src="https://s1.ax1x.com/2020/07/11/U1M5UP.png" alt="U1M5UP.png" border="0" /><br>（6）验证SSH免密是否成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>1、创建一个文件夹，比如文件名为Hexo，进入到该文件夹里，在文件导航栏里输入cmd进入命令提示符，输入以下命令安装Hexo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-cli -g</span><br><span class="line">cnpm install hexo --save</span><br></pre></td></tr></table></figure><br>2、初始化hexo，在blog目录下点击鼠标右键，打开<strong>Git Bash</strong>终端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><br>3、在cmd中输入以下命令安装依赖以及相关插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">cnpm install hexo-generator-index --save</span><br><span class="line">cnpm install hexo-generator-archive --save</span><br><span class="line">cnpm install hexo-generator-category --save</span><br><span class="line">cnpm install hexo-generator-tag --save</span><br><span class="line">cnpm install hexo-server --save</span><br><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">cnpm install hexo-deployer-heroku --save</span><br><span class="line">cnpm install hexo-deployer-rsync --save</span><br><span class="line">cnpm install hexo-deployer-openshift --save</span><br><span class="line">cnpm install hexo-renderer-marked@0.2 --save</span><br><span class="line">cnpm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">cnpm install hexo-generator-feed@1 --save</span><br><span class="line">cnpm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><br>4、启动Hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><br>5、在浏览器中输入：<strong>localhost:4000</strong>，可以看到Hexo的示例页面<br><img src="https://s1.ax1x.com/2020/07/11/U1GJ9x.png" alt="U1GJ9x.png" border="0" width="960" /></p><h2 id="将博客部署到Github"><a href="#将博客部署到Github" class="headerlink" title="将博客部署到Github"></a>将博客部署到Github</h2><p>1、在上面创建的Hexo文件夹中找到<strong>_config.yml</strong>文件，用文本编辑器打开，在最下方添加远程仓库地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #xxx改为你的github用户名（请修改）</span><br><span class="line">  #注意，如果repository写成https:&#x2F;&#x2F;github.com，在提交任务至Github时，会频繁输入用户名密码</span><br><span class="line">  repository: git@github.com:xxx&#x2F;xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><br>2、在<strong>Hexo\source_post</strong>目录下右击选择<strong>Git Bash Here</strong>,使用以下命令新建博客，会生成firstblog.md的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;firstblog&quot;</span><br></pre></td></tr></table></figure><br>3、可以根据Markdown语法来编辑上面生成的文件<br>4、设置身份信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><br>5、部署到Github上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><br>6、如果遇到到<strong>ERROR Deployer not found: git</strong>提示，可以尝试使用以下命令后再重新部署到Github上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><br>7、在浏览器上输入：<strong>用户名.github.io</strong>即可看到刚才写的博客已提交到仓库，在这一步可能你看到的是<strong>&lt;%- partial(‘_partial/head’) %&gt;</strong>，等一小会后刷新就可以了，至此，一个简单的博客就搭建好了，接下来就可以美化我们的博客了。</p><h2 id="美化博客"><a href="#美化博客" class="headerlink" title="美化博客"></a>美化博客</h2><p>基于hexo博客系统的主题有很多，你可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a>找到你喜欢的主题。我采用的是next主题，以下是注意的几点：</p><ul><li>next主题的<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">官方网站</a>详细阐述了主题的基本配置过程，我也是参照它一步步进行配置的</li><li>在配置主题的过程中要注意区分两个配置文件，一个是主题的配置文件_config.yml，一个是站点的配置文件_config.yml。因为有些配置操作实在主题的配置文件中进行的，有的实在站点的配置文件进行的，一定不能弄混了。</li><li>推荐一篇<a href="http://shenzekun.cn/hexo的next主题个性化配置教程.html" target="_blank" rel="noopener">next主题美化的博文</a></li><li>对主题进行配置时，建议是每修改一项之后都在本地运行一下（先运行hexo g命令，在运行hexo s命令，在浏览器中查看），看看有没有出错，这样可以及时找到出错的地方。</li></ul><h2 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h2><p>1、可以使用Markdown语法来撰写自己的博客内容，在博客内容之前加上如下语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World #自己的博客标题</span><br><span class="line">tags: test #博客标签</span><br><span class="line">categories: test #博客分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure><br>2、之后将博客导出为md格式放到Hexo根目录下的source_posts文件夹里<br>3、使用<strong>hexo d -g</strong>将博客部署到github上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo-GitHub搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-GitHub搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+GitHub搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+GitHub搭建个人博客&lt;/h1&gt;&lt;h2 id=&quot;基本环境&quot;
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
